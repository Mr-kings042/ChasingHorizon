openapi: 3.0.0
info:
  title: Users Blog API
  description: API for managing a blogging platform including authentication, user management, posts, tags, photos, and comments.
  version: 1.0.0
paths:
  /auth:
    post:
      summary: User Authentication
      description: Authenticate a user and return a token.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Unauthorized - Invalid credentials

  /user:
    get:
      summary: Get User Details
      description: Retrieve details of a specific user.
      parameters:
        - in: query
          name: userId
          schema:
            type: string
          required: true
          description: The ID of the user to retrieve.
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  email:
                    type: string
        '404':
          description: User not found

  /posts:
    get:
      summary: Get All Posts
      description: Retrieve a list of all blog posts.
      responses:
        '200':
          description: A list of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    title:
                      type: string
                    content:
                      type: string

    post:
      summary: Create a New Post
      description: Create a new blog post.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
              required:
                - title
                - content
      responses:
        '201':
          description: Post created successfully
        '400':
          description: Bad request - Validation error

  /tags:
    get:
      summary: Get All Tags
      description: Retrieve a list of all tags used in blog posts.
      responses:
        '200':
          description: A list of tags
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /photos:
    post:
      summary: Upload a Photo
      description: Upload a photo to associate with a blog post.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
      responses:
        '201':
          description: Photo uploaded successfully
        '400':
          description: Bad request - File error

  /comments:
    get:
      summary: Get Comments for a Post
      description: Retrieve a list of comments for a specific post.
      parameters:
        - in: query
          name: postId
          schema:
            type: string
          required: true
          description: The ID of the post to retrieve comments for.
      responses:
        '200':
          description: A list of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    postId:
                      type: string
                    content:
                      type: string
        '404':
          description: Post not found
